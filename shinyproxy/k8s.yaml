kluapiVersion: apps/v1
kind: Deployment
metadata:
  name: shinyproxy-server
  namespace: shinyproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shinyproxy-server
  template:
    metadata:
      labels:
        app: shinyproxy-server
    spec:
      containers:
      - name: shinyproxy-server
        image: registry.digitalocean.com/theia-1in1000-shinyapps/shinyproxy:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080   
        envFrom:
        - secretRef:
            name: db-credentials
      # affinity: 
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: doks.digitalocean.com/node-pool
      #           operator: In
      #           values:
      #           - shinyproxy-pool
---
apiVersion: v1
kind: Service
metadata:
  name: shinyproxy-server
  namespace: shinyproxy
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 8080 
  selector:
    app: shinyproxy-server 
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: shinyproxy-server-hpa
  namespace: shinyproxy
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: shinyproxy-server
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: shinyproxy-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/exec", "pods/portforward", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: shinyproxy-cluster-rolebinding
subjects:
- kind: ServiceAccount
  name: default
  namespace: shinyproxy
roleRef:
  kind: ClusterRole
  name: shinyproxy-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: shinyproxy-ingress
  namespace: shinyproxy
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    kubernetes.io/ingress.class: "nginx" 
    cert-manager.io/cluster-issuer: "letsencrypt-prod" 
spec:
  tls: 
  - hosts:
    - "apps.1in1000.com"
    secretName: shinyproxy-tls  # Cert-manager will store the issued cert here
  rules:
  - host: "apps.1in1000.com"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: shinyproxy-server
            port:
              number: 80
---
# HTTPS PART
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: shinyproxy  
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: bertrand@2degrees-investing.org  # Replace with your email address
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
       ingress:
         class: nginx
---
# HTTPS PART
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: shinyproxy-tls
  namespace: shinyproxy
spec:
  secretName: shinyproxy-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - apps.1in1000.com


  